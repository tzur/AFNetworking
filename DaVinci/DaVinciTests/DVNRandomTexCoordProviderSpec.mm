// Copyright (c) 2016 Lightricks. All rights reserved.
// Created by Rouven Strauss.

#import "DVNRandomTexCoordProvider.h"

#import <LTEngine/LTQuad.h>
#import <LTKit/LTRandom.h>

#import "DVNTexCoordProviderExamples.h"

SpecBegin(DVNRandomTexCoordProvider)

__block LTRandomState *randomState;
__block std::vector<lt::Quad> simpleInputQuads;
__block NSArray<LTQuad *> *inputQuads;
__block DVNRandomTexCoordProviderModel *model;

beforeEach(^{
  randomState = [[LTRandom alloc] initWithSeed:2].engineState;
  simpleInputQuads = {lt::Quad(CGRectMake(0, 0, 0.5, 0.5)),
                      lt::Quad(CGRectMake(0.5, 0.5, 0.5, 0.5))};
  inputQuads = @[[LTQuad quadFromRect:CGRectMake(0, 0, 0.5, 0.5)],
                 [LTQuad quadFromRect:CGRectMake(0.5, 0.5, 0.5, 0.5)]];
});

context(@"initialization", ^{
  it(@"should initialize correctly", ^{
    model = [[DVNRandomTexCoordProviderModel alloc] initWithRandomState:randomState
                                                        textureMapQuads:simpleInputQuads];
    expect(model).toNot.beNil();
    expect(model.randomState).to.equal(randomState);
    expect(model.textureMapQuads == simpleInputQuads).to.beTruthy();
  });
});

itShouldBehaveLike(kDVNTexCoordProviderExamples, ^{
  return @{
    kDVNTexCoordProviderExamplesModel: model,
    kDVNTexCoordProviderExamplesInputQuads: inputQuads,
    // Due to the sequence of random numbers generated by the random number generator used
    // internally by the \c provider provider by \c model, the first two expected quads happen to be
    // \c inputQuads.lastObject, while the third and fourth expected quad happen to be
    // \c inputQuads.firstObject.
    kDVNTexCoordProviderExamplesExpectedQuads: @[inputQuads.lastObject, inputQuads.lastObject],
    kDVNTexCoordProviderExamplesAdditionalInputQuads: inputQuads,
    kDVNTexCoordProviderExamplesAdditionalExpectedQuads: @[inputQuads.firstObject,
                                                           inputQuads.firstObject]
  };
});

context(@"provider", ^{
  context(@"model", ^{
    it(@"should provide a correct updated model", ^{
      id<DVNTexCoordProvider> provider = [model provider];
      [provider textureMapQuadsForQuads:simpleInputQuads];
      DVNRandomTexCoordProviderModel *currentModel = [provider currentModel];
      expect(currentModel).toNot.equal(model);
      expect(currentModel.randomState).toNot.equal(model.randomState);
      expect(currentModel.textureMapQuads == model.textureMapQuads).to.beTruthy();
    });
  });
});

SpecEnd
