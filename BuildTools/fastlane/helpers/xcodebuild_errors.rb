# frozen_string_literal: true

require "fastlane"

# Helper class for handling errors generated by xcodebuild.
class XcodebuildErrors
  ERRORS_FOR_RETRY = [
    "Early unexpected exit, operation never finished bootstrapping - no restart will be attempted"
  ].freeze

  ERROR_FOR_FILTER = [
    /Test operation was canceled/,
    /Writing diagnostic log/,
    /Beginning test session/,
    /Details: /,
    /Function: /,
    /Thread: /,
    /Please file a bug at/,
    /SimDevice: /,
    /PluginLoading: Required plug-in compatibility/,
    /DTDeviceKit: deviceType from/,
    /com\.apple\.dt\.XCTest\/IDETestRunSession/,
    /} \((\d|\.)+ \([0-9A-F]+\)\)/
  ].freeze

  # Checks the given stderr generated by xcodebuild and returns true if the error generated by
  # xcodebuild warrents another execution of the xcodebuild command or not.
  #
  # @params stderr (Array<String>) stderr generated by xcodebuild.
  # @return (Boolean) True if the stderr contains errors the indicate there was a failure that was
  # not caused by the input and another retry of the same xcodebuild command may be successful.
  def self.should_retry_xcodebuild?(stderr)
    stderr.any? { |line| ERRORS_FOR_RETRY.any? { |error_msg| line.include? error_msg } }
  end

  # Filters any noise and logs unrelated to the build processed existing in the given stderr
  # generated by xcodebuild.
  # @params stderr (Array<String>) stderr generated by xcodebuild.
  # @return (Array<String>) the given stderr without unimportant data.
  def self.filter_errors(stderr)
    stderr.reject { |line| ERROR_FOR_FILTER.any? { |error_regex| error_regex.match? line } }
  end
end
