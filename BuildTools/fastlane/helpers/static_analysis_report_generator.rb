# frozen_string_literal: true

require "time"
require "fileutils"
require "pathname"
require_relative "action_helper"

module Fastlane
  module Actions
    # Generates a summary reports from HTML reports generated by clang static analyzer.
    # Two reports are generated:
    #   1. HTML reports with summary information and links to the individual reports generated by
    #      clang.
    #   2. junit xml containing the static analyzer warnings as test failures.
    class StaticAnalysisReportGenerator
      # The directory (relative to the generated HTML report) where the specific bugreports
      # generated by the compiler are stored.
      BUGREPORTS_DIRECTORY_NAME = "static_analysis_issues"

      # Generates reports from a given directory that contains the HTML reports generated by clang's
      # static analyzer.
      #
      # @param static_analysis_output_path (String): Path to a directory containing static analysis
      #   HTML reports generated by clang.
      # @param junit_report_path (String): Path to output the junit xml file.
      # @param html_report_path (String): Path to output the summary HTML report. The HTML reports
      #   are copied to a directory in the same directory of this file.
      #
      # @return (Integer): The number of issues found by the static analyzer.
      def generate_report(static_analysis_output_path, junit_report_path, html_report_path)
        # Copy all html issue reports to a new directory
        bugreports_destination_dir_path =
          File.join(File.dirname(html_report_path), BUGREPORTS_DIRECTORY_NAME)
        FileUtils.mkdir_p(bugreports_destination_dir_path)
        bugreports_origin_paths =
          Dir.glob(File.join(static_analysis_output_path, "**", "report-*.html"))
        FileUtils.cp(bugreports_origin_paths, bugreports_destination_dir_path)

        bugreports_file_paths = bugreports_origin_paths.map do |bugreport_path|
          File.join(bugreports_destination_dir_path, File.basename(bugreport_path))
        end

        bugs = bugreports_file_paths.map do |report_path|
          bug = bug_from_bugreport_path(report_path)
          # The path to the report file contains the path relative to the repo, in order to have a
          # link to the original bug report in the summary, we need a path relative to the HTML
          # summary file.
          bug[:report_path] = File.join(BUGREPORTS_DIRECTORY_NAME, File.basename(report_path))
          bug
        end

        html_report = summary_report_for_bugs(bugs)
        junit_report = junit_report_for_bugs(bugs)

        File.write(html_report_path, html_report)
        write_xml_document(junit_report, junit_report_path)
        bugs.count
      end

      private

      def bug_from_bugreport_path(file_path)
        issue = {}

        bug_regexes = {
          type: /<!-- BUGTYPE (.*) -->$/,
          filename: /<!-- BUGFILE (.*) -->$/,
          path_length: /<!-- BUGPATHLENGTH (.*) -->$/,
          line: /<!-- BUGLINE (.*) -->$/,
          category: /<!-- BUGCATEGORY (.*) -->$/,
          description: /<!-- BUGDESC (.*) -->$/,
          function: /<!-- FUNCTIONNAME (.*) -->$/
        }.freeze

        File.foreach(file_path) do |line|
          break if line == "<!-- BUGMETAEND -->"

          bug_regexes.each do |key, expression|
            if (matches = line.match(expression))
              issue[key] = matches[1]
              break
            end
          end
        end

        issue
      end

      def summary_report_for_bugs(bugs)
        require "erb"
        report_template = File.read(Helpers.resource_path("static_analysis_summary.html.erb"))
        ERB.new(report_template).result(binding)
      end

      def junit_report_for_bugs(bugs)
        require "rexml/document"
        require "rexml/formatters/pretty"

        document = REXML::Document.new
        document << REXML::XMLDecl.new("1.0", "UTF-8")
        suites = document.add_element("testsuites", "tests" => bugs.count, "failures" => bugs.count)

        bug_types = bugs.map { |bug| bug[:type] }.uniq
        bugs_by_type = bug_types.map do |bug_type|
          [bug_type, bugs.select { |bug| bug[:type] == bug_type }]
        end.to_h

        bugs_by_type.each_value do |bugs_with_type|
          suite = suites.add_element("testsuite", "tests" => bugs_with_type.count,
                                                  "failures" => bugs_with_type.count)
          bugs_with_type.each do |bug|
            testcase = suite.add_element("testcase", "classname" => bug[:type],
                                                     "name" => bug[:category])
            failure = testcase.add_element("failure", "message" => bug[:description])

            failure.text = "#{File.basename(bug[:filename])}:#{bug[:line]}"
          end
        end

        document
      end

      def write_xml_document(document, filepath)
        formatter = REXML::Formatters::Pretty.new(2)
        formatter.compact = true
        File.open(filepath, "w") { |file| formatter.write(document, file) }
      end
    end
  end
end
