# frozen_string_literal: true

require_relative "lt_xcodebuild"
require_relative "lt_xcpretty"
require_relative "../helpers/fastlane_bugfixes"
require_relative "../helpers/action_helper"
require_relative "../helpers/junit_helper"

module Fastlane
  module Actions
    # Action that build and immeditely run tests of an xcodebuild targets.
    class LtBuildAndTestAction < Action
      BUILD_DIR_DERIVED_DATA_REGEX = /BUILD_DIR = (.*)\n/

      def self.description
        "Builds and tests xcodebuild targets"
      end

      def self.details
        "Builds an xcodebuild target with the provided options, while writing raw log to file. " \
        "Generates junit and html reports that contains the results of the test."
      end

      # rubocop:disable Metrics/MethodLength
      def self.available_options
        # rubocop:enable Metrics/MethodLength
        [
          LtXcodebuildOptions.project_option,
          LtXcodebuildOptions.workspace_option,
          LtXcodebuildOptions.scheme_option,
          LtXcodebuildOptions.configuration_option,
          LtXcodebuildOptions.destination_option,
          LtXcodebuildOptions.derived_data_path_option,
          LtXcodebuildOptions.other_flags_option,
          LtXcodebuildOptions.enable_thread_sanitizer_option,
          LtXcodebuildOptions.enable_address_sanitizer_option,
          LtXcodebuildOptions.enable_undefined_behavior_sanitizer_option,
          LtXcodebuildOptions.raw_logfile_path_option,
          LtXcodebuildOptions.treat_warnings_as_errors_option(default_value: true),
          LtXcodebuildOptions.ccache_option,
          FastlaneCore::ConfigItem.new(
            key: :collect_screenshots,
            env_name: "LT_XCODEBUILD_COLLECT_SCREENSHOTS",
            description: "Whether to collect screenshots from tests. Screenshots are copied to" \
                          "the directory specified by the \":screenshots_path\" option",
            type: Boolean,
            optional: true,
            default_value: false
          ),
          FastlaneCore::ConfigItem.new(
            key: :screenshots_path,
            env_name: "LT_XCODEBUILD_SCREENSHOTS_PATH",
            description: "Path to a directory that will contain screenshots generated by tests",
            type: String,
            optional: true,
            default_value: "output/screenshots"
          )
        ] + LtXcprettyOptions.available_options
      end

      def self.derived_data_directory(params)
        return pramas[:derived_data_path] if pramas[:derived_data_path]

        xcodebuild_flags = +"-showBuildSettings "
        xcodebuild_flags << "-project #{params[:project]}" if params[:project]
        xcodebuild_flags << "-workspace #{params[:workspace]}" if params[:workspace]
        xcodebuild_output = `xcodebuild #{xcodebuild_flags}`
        match = BUILD_DIR_DERIVED_DATA_REGEX.match(xcodebuild_output)

        return File.expand_path(File.join(match[1], "..", "..")) if match

        UI.abort_with_message!("Cannot determine derived data path")
      end

      def self.collect_screenshots(time_of_build, derived_data_path, screenshot_output_path)
        screenshot_directory_path = File.join(derived_data_path, "Logs", "Test", "Attachments")
        screenshots_for_test = Dir.glob(File.join(screenshot_directory_path, "*")).select do |path|
          File.mtime(path) > time_of_build
        end

        if screennshots_for_test.count.empty?
          UI.message("No recent screenshots found in path #{screenshot_directory_path}")
          return
        end

        UI.message("Copying #{screennshots_for_test.count} screenshots to " \
                   "#{output_screenshot_path}")
        FileUtils.mkdir_p(screenshot_output_path)
        FileUtils.cp(screenshots_for_test, screenshot_output_path)
      end

      def self.kill_simulators
        `killall Simulator 1> /dev/null 2>&1`
      end

      # rubocop:disable Metrics/MethodLength, Metrics/AbcSize
      def self.run(params)
        # rubocop:enable Metrics/MethodLength, Metrics/AbcSize

        kill_simulators
        build_start_time = Time.now

        exit_code = other_action.lt_xcodebuild(
          project: params[:project],
          workspace: params[:workspace],
          scheme: params[:scheme],
          configuration: params[:configuration],
          destination: params[:destination],
          other_flags: params[:other_flags],
          derived_data_path: params[:derived_data_path],
          enable_thread_sanitizer: params[:enable_thread_sanitizer],
          enable_address_sanitizer: params[:enable_address_sanitizer],
          enable_undefined_behavior_sanitizer: params[:enable_undefined_behavior_sanitizer],
          raw_logfile_path: params[:raw_logfile_path],
          treat_warnings_as_errors: params[:treat_warnings_as_errors],
          ccache: params[:ccache],
          actions: "clean test"
        )

        other_action.lt_xcpretty(
          raw_logfile_path: params[:raw_logfile_path],
          junit_report_path: params[:junit_report_path],
          html_report_path: params[:html_report_path]
        )

        if params[:collect_screenshots]
          UI.message("Collecting screenshots")
          collect_screenshots(build_start_time, derived_data_directory(params),
                              params[:screenshots_path])
        end

        UI.message("Parsing test results")
        total_test_cases, failed_test_cases =
          Helpers::Junit.parse_junit_tests(params[:junit_report_path])
        
        if failed_test_cases.count.positive?
          UI.error("Failed test cases:")
          failed_test_cases.each { |test_case| UI.error("\t#{test_case}") }
          UI.test_failure!("Tests failed")
        end

        UI.build_failure!("Build failed, see logs for more details") if exit_code.nonzero?

        UI.success("Build and test completed successfully")
      end
    end
  end
end
